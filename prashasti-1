#include <stdio.h>
#include <stdlib.h>

// create struct
struct node {
    int data;
    struct node* next;
};

// function to traverse the linked list
void traversal(struct node* head) {
    struct node*ptr=head;
    do{
        printf("element : %d\n",ptr->data);
        ptr = ptr->next;  
    }
    while(ptr!=head);
   
}


// function to insert a new node at the beginning and return the new head
struct node* insertbeg(struct node* head, int data) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = data;
    struct node* p = head;
    while (p->next != head) {
        p = p->next;
    }
    p->next = ptr;
    ptr->next = head;
    head = ptr;
    return head;
}

struct node* insertend(struct node* head, int data) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = data;
    struct node* p = head;
    while (p->next != head) {
        p = p->next;
    }
    p->next = ptr;
   ptr->next=head;
   //head=ptr->next;
    return head;
}


struct node* insertbet(struct node* head, int data,int index) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node*p=head;
    int i=0;
    while (i!=index-1)
    {
    p=p->next;
    i++;
    ptr->data = data;
    ptr->next = p->next;
    p->next=ptr;
    return head;  // return the new head
    }
}


int main() {
    // initialization
    struct node* head;
    struct node* second;
    struct node* third;

    // allocate memory
    head = (struct node*)malloc(sizeof(struct node));
    second = (struct node*)malloc(sizeof(struct node));
    third = (struct node*)malloc(sizeof(struct node));

    // linking
    head->data = 7;
    head->next = second;

    second->data = 67;
    second->next = third;

    third->data = 9;
    third->next = head;

    // calling function to traverse the linked list
    printf("Original linked list:\n");
    traversal(head);

    // inserting a new node at the beginning
    head = insertbeg(head, 5);
   printf("Updated linked list:\n");
    traversal(head);
    // inserting a new node at the end
       head = insertend(head,45);
   printf("Updated linked list:\n");
    traversal(head);
    // inserting a new node at the end
     head = insertbet(head,11,2);
   printf("Updated linked list:\n");
    traversal(head);
}
